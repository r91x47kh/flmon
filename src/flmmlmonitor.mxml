<?xml version="1.0" encoding="utf-8"?>

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:flmml="com.txt_nifty.sketch.flmml.*"
                layout="absolute" creationComplete="init();">
    <mx:Style>
        @namespace mx "http://www.adobe.com/2006/mxml";
        mx|TextArea {
            fontFamily: "_typewriter","ＭＳ ゴシック","平成角ゴシック","monospace";
            fontSize: 14pt;
        }
    </mx:Style>

	<mx:Script>
	  <![CDATA[
				import com.txt_nifty.sketch.flmml.MEvent;
				import com.txt_nifty.sketch.flmml.MStatus
				import com.txt_nifty.sketch.flmml.MML;
				import com.txt_nifty.sketch.flmml.MMLEvent;
				import com.txt_nifty.sketch.flmml.MSequencer;
				import flash.events.Event;
				import flash.events.KeyboardEvent;
				import flash.events.FocusEvent;
				import flash.ui.Keyboard;
				import flash.geom.Rectangle;
				import net.vt6f3ohw.flmon.PianoRoll;
				import flash.display.Graphics;
				import flash.display.Sprite;
				import flash.text.TextField;
				import net.vt6f3ohw.flmon.PianoRollItem;
				
				protected var m_timer:Timer;
			  
			  
				// 定数たち
				
				// Sprite製UI部品たち
				private var _rootSp_PRoll_ref:PianoRoll; // root となる Sprite
					private var _text_ref:TextField;
				private var _mask_PRoll_ref:Sprite; // マスク
				
				// カウンタたち
				private var frameCounter:uint = 0;

				public function init():void {
					var i:int; // for用
					  
					if (this.parameters["mml"] != undefined) // mmlパラメータが渡されていたらMML入力欄にそれを置いておく
						input.text = unescape(this.parameters["mml"]);

					player.addEventListener(MMLEvent.COMPILE_COMPLETE, setWarnings);
					player.addEventListener(MMLEvent.COMPLETE,         onComplete);
					player.addEventListener(MMLEvent.BUFFERING,        onBuffering);
					
					m_timer = new Timer(250*4, 0); // 「1秒ごとに」「無限回」繰り返す
					m_timer.addEventListener(TimerEvent.TIMER, onSecond);

					{ // UIの用意
						{ // 小節数表示部分のUIの準備
							;
						}
						{ // 鍵盤部分のUIの準備
							;
						}
						{ // ピアノロール部分のUIの準備
							{ // 描画が mx:Image 外にはみ出さないように、mx:Image にマスクを設定
								var mask_PRoll:Sprite;
								{ // mask_PRoll の初期化
									mask_PRoll = new Sprite();
									mask_PRoll.cacheAsBitmap = true;
									mask_PRoll.graphics.beginFill(0x000000);
									mask_PRoll.graphics.drawRect(0, 0, pianoroll.width, pianoroll.height);
									mask_PRoll.graphics.endFill();
								}
								_mask_PRoll_ref = mask_PRoll;
								
								pianoroll.addChild(mask_PRoll); // マスクをかける位置は動的に変化するため、addChild しておかないとマスクの位置がズレるので注意
								pianoroll.mask = mask_PRoll;
							}
							{ // mx:Image の中に Sprite ツリーを投入
								var rootSp_PRoll:PianoRoll; // mx:Image の中で root となる Sprite
								{ // rootSp_PRoll の初期化
									rootSp_PRoll = new PianoRoll();
									rootSp_PRoll.focusRect = true;
									rootSp_PRoll.opaqueBackground = true;
									rootSp_PRoll.cacheAsBitmap = true;
									rootSp_PRoll.scrollRect = new Rectangle(0, 0, pianoroll.width, pianoroll.height); // デフォルトのスクロール位置とビューポートのサイズを設定
									{ // 背景矩形を描画
										rootSp_PRoll.graphics.beginFill(0xffffff);
										rootSp_PRoll.graphics.drawRect(0, 0, (PianoRoll.BEAT_WIDTH*4)*100, PianoRoll.SEMITONE_HEIGHT*128);
										rootSp_PRoll.graphics.endFill();
									}
									{ // rootSp_PRoll に子Sprite （テキスト）を追加
										var text:TextField;
										{
											text = new TextField();
											text.x = 20;
											text.y = 20;
										}
										_text_ref = text; // 参照のプール
										
										rootSp_PRoll.addChild(text);
									}
									rootSp_PRoll.addEventListener(Event.ENTER_FRAME, function(e:Event):void { // デバッグ用。フレームカウンタを表示
										//_text_ref.text = pianoroll.width.toString() + ", " + pianoroll.height.toString();
										_text_ref.text = (++frameCounter).toString();
									});
									rootSp_PRoll.addEventListener(FocusEvent.FOCUS_IN, function(e3:FocusEvent):void {
										trace(e3);
									});
								}
								_rootSp_PRoll_ref = rootSp_PRoll; // 参照のプール
								
								pianoroll.addChild(rootSp_PRoll);
							}
							pianoroll.addEventListener(Event.RESIZE, function(e:Event):void { // ピアノロールのサイズが変わった場合に備えてイベントハンドラを設定
								{ // マスク矩形のサイズを更新
									_mask_PRoll_ref.graphics.clear();
									_mask_PRoll_ref.graphics.beginFill(0x000000);
									_mask_PRoll_ref.graphics.drawRect(0, 0, pianoroll.width, pianoroll.height);
									_mask_PRoll_ref.graphics.endFill();
								}
								{ // ピアノロールのビューポートのサイズを更新
									var rect:Rectangle;
									{
										rect = _rootSp_PRoll_ref.scrollRect.clone();
										rect.width = pianoroll.width;
										rect.height = pianoroll.height;
									}
									
									_rootSp_PRoll_ref.scrollRect = rect;
								}
							});
							pianorollcontainer.focusEnabled = true;
							pianorollcontainer.addEventListener(KeyboardEvent.KEY_DOWN, function(e2:KeyboardEvent):void {
								switch(e2.keyCode) {
									case Keyboard.UP:
										{ // ピアノロールのスクロール位置を更新
											var rect:Rectangle;
											{
												rect = _rootSp_PRoll_ref.scrollRect.clone();
												rect.y -= 20;
											}
											
											_rootSp_PRoll_ref.scrollRect = rect;
										}
										break;
									case Keyboard.DOWN:
										{ // ピアノロールのスクロール位置を更新
											var rect2:Rectangle;
											{
												rect2 = _rootSp_PRoll_ref.scrollRect.clone();
												rect2.y += 20;
											}
											
											_rootSp_PRoll_ref.scrollRect = rect2;
										}
										break;
									case Keyboard.LEFT:
										{ // ピアノロールのスクロール位置を更新
											var rect3:Rectangle;
											{
												rect3 = _rootSp_PRoll_ref.scrollRect.clone();
												rect3.x -= 20;
											}
											
											_rootSp_PRoll_ref.scrollRect = rect3;
										}
										break;
									case Keyboard.RIGHT:
										{ // ピアノロールのスクロール位置を更新
											var rect4:Rectangle;
											{
												rect4 = _rootSp_PRoll_ref.scrollRect.clone();
												rect4.x += 20;
											}
											
											_rootSp_PRoll_ref.scrollRect = rect4;
										}
										break;
									default:
										break;
								}
							});
						}
					}
				}

	          public function setHTML():void {
	            if (tn.selectedIndex == 1) {
	              var swfVersion:String = "10.0.12"; // flash version
	              var str:String = input.text;
	              str = escape(str);
	              var token:Array = str.split("+");
	              str = token.join("%2b");
	              var date:Date = new Date();
	              var contentId:String = "flmml" + date.valueOf();
	              output.text  = "<div id=\""+contentId+"\">\n";
	              output.text += "The Flash movie is here. JavaScript enabled please.\n";
	              output.text += "</div>\n";
	              output.text += "<script type=\"text/javascript\" src=\""+jsName.text+"\"></script>\n";
	              output.text += "<script type=\"text/javascript\">\n";
	              output.text += "var flashvars = {mml: \""+str+"\"};\n";
	              output.text += "var params = {bgcolor: \"#"+swfBackground.selectedColor.toString(16)+"\"};\n";
	              output.text += "var attributes = {};\n";
	              output.text += "swfobject.embedSWF(\""+swfName.text+"\", ";
	              output.text += "\""+contentId+"\", \""+swfWidth.value+"\", \""+swfHeight.value+"\", ";
	              output.text += "\""+swfVersion+"\", \"expressInstall.swf\", flashvars, params, attributes);\n";
	              output.text += "</script>\n";
	            }
	          }

	          public function toClipboard():void {
	            System.setClipboard(output.text.substring(0, output.text.length));
	          }

	          public function setWarnings(e:Event):void {
	            warnings.text = player.getWarnings();
	          }

				public function play():void {
					var i:int; // for用
					var j:int; // for用
					var len:int; // for用
					var len2:int; // for用
					var e:MEvent; // for用
					var eventsOfTrack:Array; // for用
					var item:PianoRollItem;
					
					if (!player.isPlaying()) {
						if (player.isPaused()) m_timer.start(); // 1秒ごとに再生位置表示を更新するタイマーを起動
						player.play(input.text);
						playButton.label = "Pause";
					}
					else {
						player.pause();
						playButton.label = "Play";
						m_timer.stop();
					}

					var tracks:Array;
					{
						var sequencer:MSequencer;
						{
							var mml:MML;
							{
								mml = player.getMML();
							}
							
							sequencer = mml.getSequencer();
						}
						
						tracks = sequencer.getTrackArr();
					}
					
					/*{ // MEvent 列をダンプ
						len = tracks.length;
						for (i = 0 ; i < len ; i++ ) {
							trace("[track " + i + "]");
							trace(tracks[i].getEventsStr()); // デバッグ用
							trace("\n")
						}
					}*/
					
					
					len2 = tracks.length;
					for (j = 0 ; j < len2 ; j++ ) { // tracks[j] のノート(= PianoRollItem)の列を画面上に表示
						eventsOfTrack = tracks[j].getEvents();
						
						{
							var pianoRollItemArr:Array;
							{ // pianoRollItemArr を初期化。tracks[j] の MEvent 列をノート(= PianoRollItem)の列に変換
								pianoRollItemArr = new Array();
								{ // pianoRollItemArr にノート(= PianoRollItem)を push していく
									len = eventsOfTrack.length;
									for (i = 0 ; i < len ; i++ ) { // MEvent インスタンスを順次走査
										e = eventsOfTrack[i];
										switch(e.getStatus()) { // TODO: test-driven で異常系を実装する
											case MStatus.NOTE_ON:
												item = new PianoRollItem();
												item.startPosInTick = e.getTick();
												item.startPitch = e.getNoteNo()*100;
												item.velocity = e.getVelocity();
												break;
											case MStatus.NOTE_OFF:
												item.endPosInTick = e.getTick();
												pianoRollItemArr.push(item);
												break;
											case MStatus.DETUNE: // TODO: DETUNE によるノートの音高変化に対応
											default:
												break;
										}
									}
								}
							}
							
							trace(pianoRollItemArr);
							_rootSp_PRoll_ref.shape2_ref.graphics.lineStyle(2, (64+Math.floor(Math.random()*192))*0x10000 + (64+Math.floor(Math.random()*192))*0x100 + (64+Math.floor(Math.random()*192)));
							{
								len = pianoRollItemArr.length;
								for (i = 0 ; i < len ; i++ ) { // MEvent インスタンスを順次走査
									var item2:PianoRollItem = pianoRollItemArr[i];
									
									{ // ノートを配置
										_rootSp_PRoll_ref.shape2_ref.graphics.moveTo(
											Number(PianoRoll.BEAT_WIDTH) * (Number(item2.startPosInTick) / 96.0),
											Number(PianoRoll.SEMITONE_HEIGHT) * (128.0 - (Number(item2.startPitch) / 100.0))
										);
										_rootSp_PRoll_ref.shape2_ref.graphics.lineTo(
											Number(PianoRoll.BEAT_WIDTH) * (Number(item2.endPosInTick) / 96.0),
											Number(PianoRoll.SEMITONE_HEIGHT) * (128.0 - (Number(item2.startPitch) / 100.0))
										);
									}
								}
			
							}
						}
						
					}
					
				}

	          public function stop():void {
	            player.stop();
	            playButton.label = "Play";
	            m_timer.reset();
	            progress.text = "";
				  voiceCount.text = "";
	          }

	          public function onComplete(e:Event):void {
	            playButton.label = "Play";
	            m_timer.reset();
	            progress.text = "";
				  voiceCount.text = "";
	          }

	          public function onBuffering(e:MMLEvent):void {
	            if (e.progress < 100) {
					  progress.text = "Buffering " + e.progress + "%";
					  voiceCount.text = "";
	            } else {
	              onSecond(e);
	              m_timer.start();
	            }
	          }

	          public function onSecond(e:Event):void {
	            progress.text = player.getNowTimeStr() + " / " + player.getTotalTimeStr();
				  //voiceCount.text = "♪" + player.getVoiceCount();
	          }
	      ]]>
	</mx:Script>

	<mx:Panel title="FlMML" width="100%" height="100%"
	          paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4">

	  <mx:TabNavigator id="tn"  width="100%" height="100%"
	                   paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4"
	                   change="setHTML();">
	    <mx:VBox label="MML">
	      <mx:VDividedBox width="100%" height="100%" backgroundColor="#dddddd">
	        <mx:TextArea id="input" width="100%" height="20%" fontSize="14" text="L8 O5CDEFGAB&lt;C"></mx:TextArea>
			<mx:TextArea id="pianorollcontainer" width="100%" height="10%"></mx:TextArea>
			<mx:Grid width="100%" height="60%" horizontalGap="0" verticalGap="0" backgroundColor="#ffdddd">
				<mx:GridRow width="100%">
					<mx:GridItem backgroundColor="#0080C0">
					</mx:GridItem>
					<mx:GridItem height="48">
						<!--小節数--><mx:Image></mx:Image>
					</mx:GridItem>
					<mx:GridItem backgroundColor="#0080C0">
					</mx:GridItem>
				</mx:GridRow>

				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="120">
						<!--鍵盤--><mx:Image></mx:Image>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%">
						<!--ピアノロール--><mx:Image id="pianoroll" width="100%" height="100%"></mx:Image>
					</mx:GridItem>
					<mx:GridItem>
						<mx:VScrollBar height="100%" />
					</mx:GridItem>
				</mx:GridRow>

				<mx:GridRow width="100%">
					<mx:GridItem backgroundColor="#0080C0">
					</mx:GridItem>
					<mx:GridItem>
						<mx:HScrollBar width="100%" />
					</mx:GridItem>
					<mx:GridItem backgroundColor="#0080C0">
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
	        <mx:TextArea id="warnings" width="100%" height="10%" fontSize="10" editable="false">
	          <mx:text></mx:text>
	        </mx:TextArea>
	      </mx:VDividedBox>
	      <mx:Box direction="horizontal">
	        <mx:Button id="playButton" label="Play" click="play();" />
	        <mx:Button id="stopButton" label="Stop" click="stop();" />
	        <mx:HSlider id="hSlider" minimum="0" maximum="127" value="100"
	                    dataTipPlacement="top" tickColor="black" snapInterval="1"
	                    allowTrackClick="true" liveDragging="true"
	                    change="player.setMasterVolume(hSlider.value);"/>
	        <mx:Label id="progress" text="" />
	        <mx:Label id="voiceCount" text="" />
	      </mx:Box>
	      <flmml:FlMML id="player" />
	    </mx:VBox>

	    <mx:VBox label="HTML">
	      <mx:Text htmlText="&lt;u&gt;&lt;a href=&quot;http://blog.deconcept.com/swfobject/&quot;&gt;SWFObject 2.0&lt;/a&gt;&lt;/u&gt; is required."/>
	      <mx:TextArea id="output" width="100%" height="100%" fontSize="14" editable="false">
	        <mx:text>
	        </mx:text>
	      </mx:TextArea>
	      <mx:Grid>
	        <mx:GridRow>
	          <mx:GridItem>
	            <mx:Text text="jsName" />
	          </mx:GridItem>
	          <mx:GridItem>
	            <mx:TextInput id="jsName" text="swfobject.js" change="setHTML();" width="100%"/>
	          </mx:GridItem>
	        </mx:GridRow>
	        <mx:GridRow>
	          <mx:GridItem>
	            <mx:Text text="swfName" />
	          </mx:GridItem>
	          <mx:GridItem>
	            <mx:TextInput id="swfName" text="flmml.swf" change="setHTML();" width="100%"/>
	          </mx:GridItem>
	        </mx:GridRow>
	        <mx:GridRow>
	          <mx:GridItem>
	            <mx:Text text="width" />
	          </mx:GridItem>
	          <mx:GridItem>
	            <mx:Box direction="horizontal">
	              <mx:NumericStepper id="swfWidth" minimum="320" maximum="1600"
	                                 stepSize="1" value="480" change="setHTML();"/>
	              <mx:Text text="height" />
	              <mx:NumericStepper id="swfHeight" minimum="160" maximum="1200"
	                                 stepSize="1" value="320" change="setHTML();"/>
	              <mx:Text text="bgColor" />
	              <mx:ColorPicker id="swfBackground" showTextField="true" selectedColor="0xb2bfc6" change="setHTML();"/>
	            </mx:Box>
	          </mx:GridItem>
	        </mx:GridRow>
	      </mx:Grid>
	      <mx:Button id="clipButton" label="setClipboard" click="toClipboard();"/>
	    </mx:VBox>

	  </mx:TabNavigator>
	</mx:Panel>

</mx:Application>
