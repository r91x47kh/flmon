<?xml version="1.0" encoding="utf-8"?>

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:flmml="com.txt_nifty.sketch.flmml.*"
                xmlns:flmon="net.vt6f3ohw.flmon.*"
                layout="absolute"
				frameRate="60"
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				creationComplete="init();">
    <mx:Style>
        @namespace mx "http://www.adobe.com/2006/mxml";
        mx|TextArea {
            fontFamily: "_typewriter","ＭＳ ゴシック","平成角ゴシック","monospace";
            fontSize: 14pt;
        }
    </mx:Style>

	<mx:Script>
	  <![CDATA[
				import com.txt_nifty.sketch.flmml.MEvent;
				import com.txt_nifty.sketch.flmml.MStatus
				import com.txt_nifty.sketch.flmml.MML;
				import com.txt_nifty.sketch.flmml.MMLEvent;
				import com.txt_nifty.sketch.flmml.MSequencer;
				import flash.display.DisplayObject;
				import flash.events.Event;
				import flash.events.KeyboardEvent;
				import flash.events.FocusEvent;
				import flash.media.Sound;
				import flash.ui.Keyboard;
				import flash.geom.Rectangle;
				import flash.display.Graphics;
				import flash.display.Sprite;
				import flash.text.TextField;
				import flash.media.SoundChannel;
				import net.vt6f3ohw.flmon.ColorSet;
				import net.vt6f3ohw.flmon.KeyBoardPanel;
				import net.vt6f3ohw.flmon.MaskShape;
				import net.vt6f3ohw.flmon.MeasureHeader;
				import net.vt6f3ohw.flmon.PianoRoll;
				import net.vt6f3ohw.flmon.PianoRollItem;
				import net.vt6f3ohw.flmon.Util;
				
				protected var m_timer:Timer;
				
				
				// TODO: コンフィグを可能にする
				// 　　・「再生ボタンを押した時の巻き戻し」をON/OFFできるようにする
				// 　　・「オートスクロールモード」を「常時スクロール」「ページ単位スクロール」のどちらか好きな方に設定できるようにする
				
			  
				// 定数たち
				
				// Sprite製UI部品たち
				
				private var _measureheaderSprite_ref:MeasureHeader; // root となる Sprite
				
				private var _kboardSprite_ref:KeyBoardPanel; // root となる Sprite
				
				private var _pianorollSprite_ref:PianoRoll; // root となる Sprite
					private var _frameCounterText_ref:TextField;
					private var _soundChannelPositionText_ref:TextField;
				
				// UI操作用変数たち
				/** 現在のフレームの_positionXInPixel */
				private var _positionXInPixel:Number;
				/** 1フレーム前の _positionXInPixel */
				private var _positionXInPixel_prev:Number; 
				/** オートスクロールの際の毎フレームでのスクロール量を格納するキュー */
				private var _absoluteScrollQueue:Array = new Array();
				/** 再生位置バーとノートの交点に表示するインジケータのy座標の配列。_indicatorYArr[0] には0トラック目のインジケータのy座標が入る。 */
				private var _indicatorYArr:Array = null;
				/** インジケータのイージングに使用するキュー。 */
				private var _indicatorEasingQueueArr:Array = null;
				
				/** [ユーティリティ関数] DisplayObject インスタンスの scrollRect を書き換える。x, y, width, height にnullを指定した場合は以前の値を維持する。 */
				private var _updateScrollRect:Function = function(obj:DisplayObject, x:Object, y:Object, width:Object, height:Object):void {
					var rect:Rectangle;
					{
						rect = obj.scrollRect.clone();
						if(x != null){ rect.x = Number(x); }
						if(y != null){ rect.y = Number(y); }
						if(width != null){ rect.width = Number(width); }
						if(height != null){ rect.height = Number(height); }
					}
					
					obj.scrollRect = rect;
				};
				/** [ユーティリティ関数] ピアノロールを (x, y) にスクロールする（クリッピング処理が必要なので _updateScrollRect は使っていない）*/
				private var _absoluteScroll:Function = function(x:Number, y:Number):void {
					var rect:Rectangle;
					{
						rect = _pianorollSprite_ref.scrollRect.clone();
						rect.x = x;
						rect.y = y;
						if (rect.x < 0) rect.x = 0; // 画面左端以降にスクロールしようとしていたらクリッピング
						if (rect.y < 0) rect.y = 0; // 画面上端以降にスクロールしようとしていたらクリッピング
						if (rect.x + rect.width > (PianoRoll.BEAT_WIDTH*4)*100) rect.x = (PianoRoll.BEAT_WIDTH*4)*100 - rect.width; // 画面右端以降にスクロールしようとしていたらクリッピング
						if (rect.y + rect.height > PianoRoll.PIANOROLL_HEIGHT) rect.y = PianoRoll.PIANOROLL_HEIGHT - rect.height; // 画面下端以降にスクロールしようとしていたらクリッピング
					}
					
					_pianorollSprite_ref.scrollRect = rect;
				};
				/** [ユーティリティ関数] ピアノロールを (deltaX, deltaY) だけスクロールする*/
				private var _relativeScroll:Function = function(deltaX:Number, deltaY:Number):void {
					_absoluteScroll(_pianorollSprite_ref.scrollRect.x + deltaX, _pianorollSprite_ref.scrollRect.y + deltaY);
				};
							
				
				// カウンタたち
				private var _frameCounter:uint = 0;
				
				// 再生情報取得用変数たち
				/** MSequencerインスタンスへの参照 */
				private var _sequencer_ref:MSequencer = null;
				/** ノート(= PianoRollItem)の集合の集合。_例えば pianoRollItemArr_ref[0] には0トラック目のノートの集合が入っている。 */
				private var _pianoRollItemArrArr_ref:Array = null;
				/** テンポ境界における「再生位置[ms]」「再生位置[tick]」「後続のテンポ」の情報の列 */
				private var _tempoEntries_ref:Array;
				/** 再生位置[ms]に対応する再生位置[tick]を返す。*/
				private var _msToTick:Function = function(ms:Number):Number {
					var i:int; // for用
					var len:int; // for
					
					if (ms <= 0.0) return 0.0; // 変な入力に対処
					
					//trace(_tempoEntries_ref);
					//trace(_tempoEntries_ref[0]);
					//trace(_tempoEntries_ref[0]["ms"]);
					//trace(_tempoEntries_ref[0]["tick"]);
					//trace(_tempoEntries_ref[0]["tempo"]);
					//trace(2)
					len = _tempoEntries_ref.length;
					for (i = 0 ; i < len ; i++ ) { // tempo boundary entry を順次走査
						// [!!!] 同じ再生位置[tick]に tenpo boundary entry が2つ以上あるケースに注意 [!!!]

						// 「与えられた再生位置[ms]におけるテンポ」と、「その直前のテンポ境界の再生位置[tick]」を取得する
						if (ms <= _tempoEntries_ref[i]["ms"]) { // 初めて再生位置[ms]の大きなエントリに遭遇したら（ここは < でも <= でも結果は変わらない）
							return _tempoEntries_ref[i - 1]["tick"] + (ms - _tempoEntries_ref[i - 1]["ms"]) * (_tempoEntries_ref[i - 1]["tempo"] / 60.0 / 1000.0 * 96.0);
						}
					}
					
					// 与えられた再生位置[ms]が全てのテンポ境界よりも後にあった場合
					return _tempoEntries_ref[len - 1]["tick"] + (ms - _tempoEntries_ref[len - 1]["ms"]) * (_tempoEntries_ref[len - 1]["tempo"] / 60.0 / 1000.0 * 96.0);
				};
				
				// キー入力状態
				private var _isKeyPressed:Object = new Object(); // _isKeyPressed[Keyboard.XX] にキーの押下状態を保持

				public function init():void {
					var i:Number; // for用
					var j:Number; // for用
					var len:int; // for用
					var len2:int; // for用
					  
					if (this.parameters["mml"] != undefined) // mmlパラメータが渡されていたらMML入力欄にそれを置いておく
						input.text = unescape(this.parameters["mml"]);

					player.addEventListener(MMLEvent.COMPILE_COMPLETE, setWarnings);
					player.addEventListener(MMLEvent.COMPLETE,         onComplete);
					player.addEventListener(MMLEvent.BUFFERING,        onBuffering);
					
					m_timer = new Timer(250*4, 0); // 「1秒ごとに」「無限回」繰り返す
					m_timer.addEventListener(TimerEvent.TIMER, onSecond);

					{ // UIの用意
						{ // 小節番号表示部分のUIの準備
							{ // 描画が mx:Image 外にはみ出さないように、mx:Image にマスクを設定
								measureheaderUIComponent.addChild(measureheaderUIComponent.mask = new MaskShape(measureheaderUIComponent));
							}
							{ // mx:Image の中に Sprite ツリーを投入
								var measureheaderSprite:MeasureHeader; // mx:Image の中で root となる Sprite
								{ // measureheaderSprite の初期化
									measureheaderSprite = new MeasureHeader();
									measureheaderSprite.scrollRect = new Rectangle(0, 0, measureheaderUIComponent.width, measureheaderUIComponent.height); // デフォルトのスクロール位置とビューポートのサイズを設定
								}
								_measureheaderSprite_ref = measureheaderSprite;
								
								measureheaderUIComponent.addChild(measureheaderSprite);
							}
							measureheaderUIComponent.addEventListener(Event.RESIZE, function(e:Event):void { // 小節番号表示ヘッダ部分のサイズが変わった場合に備えてイベントハンドラを設定
								{ // 鍵盤部分のビューポートのサイズを更新
									_updateScrollRect(_measureheaderSprite_ref, null, null, measureheaderUIComponent.width, measureheaderUIComponent.height);
								}
							});
						}
						{ // 鍵盤部分のUIの準備
							{ // 描画が mx:Image 外にはみ出さないように、mx:Image にマスクを設定
								kboardUIComponent.addChild(kboardUIComponent.mask = new MaskShape(kboardUIComponent));
							}
							{ // mx:Image の中に Sprite ツリーを投入
								var kboardSprite:KeyBoardPanel; // mx:Image の中で root となる Sprite
								{ // kboardSprite の初期化
									kboardSprite = new KeyBoardPanel();
									kboardSprite.scrollRect = new Rectangle(0, PianoRoll.SEMITONE_HEIGHT*36, kboardUIComponent.width, kboardUIComponent.height); // デフォルトのスクロール位置とビューポートのサイズを設定
								}
								_kboardSprite_ref = kboardSprite;
								
								kboardUIComponent.addChild(kboardSprite);
							}
							kboardUIComponent.addEventListener(Event.RESIZE, function(e:Event):void { // 鍵盤部分のサイズが変わった場合に備えてイベントハンドラを設定
								{ // 鍵盤部分のビューポートのサイズを更新
									_updateScrollRect(_kboardSprite_ref, null, null, kboardUIComponent.width, kboardUIComponent.height);
								}
							});
						}
						{ // ピアノロール部分のUIの準備
							{ // 描画が mx:Image 外にはみ出さないように、mx:Image にマスクを設定
								pianorollUIComponent.addChild(pianorollUIComponent.mask = new MaskShape(pianorollUIComponent));
							}
							{ // mx:Image の中に Sprite ツリーを投入
								var pianorollSprite:PianoRoll; // mx:Image の中で root となる Sprite
								{ // pianorollSprite の初期化
									pianorollSprite = new PianoRoll();
									pianorollSprite.scrollRect = new Rectangle(0, PianoRoll.SEMITONE_HEIGHT*36, pianorollUIComponent.width, pianorollUIComponent.height); // デフォルトのスクロール位置とビューポートのサイズを設定
									{ // pianorollSprite に子Sprite （フレームカウントを表示するTextField）を追加
										var frameCounterText:TextField;
										{
											frameCounterText = new TextField();
											with (frameCounterText = new TextField()) { x = 20; y = 20; width = 400; height = 60; }
											
											// デバッグ時は true にする
											//frameCounterText.visible = true;
											frameCounterText.visible = false;
										}
										_frameCounterText_ref = frameCounterText; // 参照のプール
										
										pianorollSprite.addChild(frameCounterText);
									}
									{ // pianorollSprite に子Sprite （再生位置を表示するTextField）を追加
										var soundChannelPositionText:TextField;
										{
											with (soundChannelPositionText = new TextField()) { x = 20; y = 60; width = 400; height = 60; }
											
											// デバッグ時は true にする
											//soundChannelPositionText.visible = true;
											soundChannelPositionText.visible = false;
										}
										_soundChannelPositionText_ref = soundChannelPositionText; // 参照のプール
										
										pianorollSprite.addChild(soundChannelPositionText);
									}
									pianorollSprite.addEventListener(Event.ENTER_FRAME, function(e:Event):void { // デバッグ用。フレームカウンタを表示
										var soundChannel:SoundChannel = null;
										var positionXInTick:Number;
										if (_sequencer_ref != null) { // 最初に再生するまではずっとnullなのでnullチェック
											soundChannel = _sequencer_ref.getSoundChannel();
											positionXInTick = _msToTick(soundChannel.position);
										}
										
										{ // フレームカウント文字列を更新
											_frameCounterText_ref.text = "frame count: " + (++_frameCounter).toString();
										}
										{ // ピアノロールのスクロール位置を更新											
											{
												var isScrolled:Boolean = false; // scrollRect が変化したかどうかを格納するBoolean
												
												// 各キーが押下状態にあったらスクロール。また、オートスクロール中に左右キーが押された場合はオートスクロールを中断
												if (_isKeyPressed[Keyboard.UP] != undefined && _isKeyPressed[Keyboard.UP]) { _relativeScroll(0, -20); isScrolled = true; }
												if (_isKeyPressed[Keyboard.DOWN] != undefined && _isKeyPressed[Keyboard.DOWN]) { _relativeScroll(0, 20); isScrolled = true; }
												if (_isKeyPressed[Keyboard.LEFT] != undefined && _isKeyPressed[Keyboard.LEFT]) { _relativeScroll( -20, 0); isScrolled = true; _absoluteScrollQueue.length = 0; }
												if (_isKeyPressed[Keyboard.RIGHT] != undefined && _isKeyPressed[Keyboard.RIGHT]) { _relativeScroll(20, 0); isScrolled = true; _absoluteScrollQueue.length = 0; }
												
												// scrollRect が変化していたら Event.SCROLL イベントを dispatch
												if(isScrolled){ pianorollSprite.dispatchEvent(new Event(Event.SCROLL)); }
											}
										}
										{ // オートスクロールを処理
											if (_absoluteScrollQueue.length > 0) {
												var absoluteScrollEntry2:Object = _absoluteScrollQueue.shift();
												
												_absoluteScroll(absoluteScrollEntry2["scrollTo_x"], _pianorollSprite_ref.scrollRect.y);
												pianorollSprite.dispatchEvent(new Event(Event.SCROLL)); // Event.SCROLL イベントを dispatch
											}
										}
										{ // 再生中のUI処理
											if (_sequencer_ref != null) { // 最初に再生するまではずっとnullなのでnullチェック
												{ // 再生位置文字列を更新
													//trace(Util.getInstanceID(_sequencer_ref.getSoundChannel()));
													
													// ここ、ちゃんと毎回 _sequencer_ref.getSoundChannel() しないと
													// 「position がずっと変化しない SoundChannel インスタンス」に遭遇するので注意（原因不明）
													_soundChannelPositionText_ref.text = "sound channel position: " + _sequencer_ref.getSoundChannel().position.toString();
												}
												{ // 再生位置バーを更新＋再生位置バーに応じてオートスクロールをキュー
													pianorollSprite.playingPositionBarLayer_ref.graphics.clear();
													
														// 再生中かポーズ中のときのみ再生位置バーを表示
														if (_sequencer_ref.isPlaying() || _sequencer_ref.isPaused()) {
															if(soundChannel != null){ // 一応nullチェック
																{
																	{
																		// TODO: 「1回目はpositionXInPixel_prev に未定義の値が入る」問題に一応対処
																		_positionXInPixel_prev = _positionXInPixel; // _positionXInPixel を更新する前に _positionXInPixel_prev にバックアップ
																		_positionXInPixel = Number(PianoRoll.BEAT_WIDTH) * (_msToTick(soundChannel.position) / 96.0);
																	}
																	
																	with (pianorollSprite.playingPositionBarLayer_ref.graphics) {
																		lineStyle(4, 0x333333, 0.5);
																		moveTo(_positionXInPixel, 0);
																		lineTo(_positionXInPixel, PianoRoll.PIANOROLL_HEIGHT);
																	}
																	
																	{ // 一定の条件が満たされたときにオートスクロールをキューする
																		// オートスクロールが有効で、かつオートスクロール中でないときのみ新たにオートスクロールする
																		if (autoScrollCheckBox.selected && _absoluteScrollQueue.length == 0) {
																			var ACTIVATION_WIDTH:Number = PianoRoll.BEAT_WIDTH * 4; // 画面右端から何pixelの所をまたいだらオートスクロールするか
																			
																			//trace("_positionXInPixel_prev = " + _positionXInPixel_prev + ", _positionXInPixel = " + _positionXInPixel);
																			var autoScrollPoint:Number = pianorollSprite.scrollRect.x + pianorollSprite.width - ACTIVATION_WIDTH;
																			// 再生位置バーが画面右端から ACTIVATION_WIDTH pixel の地点をまたいだらオートスクロール
																			if (_positionXInPixel_prev < autoScrollPoint && autoScrollPoint <= _positionXInPixel) { // 再生位置バーが画面右端から ACTIVATION_WIDTH pixel の地点にピッタリ到達してしまう場合に対処して後者は「<」ではなく「<=」にしておく
																				//trace("stepped over");
																				
																				var DURATION_IN_FRAME:Number = 60.0; // 何フレームで動かすか
																				for (i = 1.0 ; i <= DURATION_IN_FRAME ; i += 1.0) {
																					var absoluteScrollEntry:Object; // スクロール先の絶対座標を保持するエントリ
																					{
																						absoluteScrollEntry = new Object(); // absoluteScrollEntry["scrollTo_x"] のみを要素に持つ連想配列
																						absoluteScrollEntry["scrollTo_x"] = Util.easeInOut_Quadratic(i, pianorollSprite.scrollRect.x, pianorollSprite.width - ACTIVATION_WIDTH, DURATION_IN_FRAME);
																					}
																					
																					_absoluteScrollQueue.push(absoluteScrollEntry);
																				}	
																			}
																		}
																	}
																}
															}
														}
													
												}
												{ // 再生位置バーとノートの交点のインジケータの位置を更新
													if (_sequencer_ref.isPlaying() || _sequencer_ref.isPaused()) { // 再生中かポーズ中のときのみ更新
														len2 = _pianoRollItemArrArr_ref.length;
														for (j = 1 ; j < len2 ; j++ ) { // 0トラック目（テンポトラック）は無視
															if (_indicatorEasingQueueArr[j] == null) { _indicatorEasingQueueArr[j] = new Array(); } // キューがなかったら作る
															
															{ // インジケータイージングキュー[j]の要素を1個消化
																if(_indicatorEasingQueueArr[j].length > 0){
																	_indicatorYArr[j] = _indicatorEasingQueueArr[j].shift(); // インジケータイージングキュー[j]から1個 dequeue してそれをトラック j の現在のインジケータの位置に代入
																}
															}
															{ // 「インジケータの状況」および「現在再生中の音高」に基づいて、インジケータイージングキュー[j]に新たなエントリを enqueue
																var pitchOfNoteAtCurrentTick:Number; // トラック j の、現在の再生位置[tick]におけるノートの音高
																var volumeOfNoteAtCurrentTick:Number; // トラック j の、ある再生位置[tick]におけるノートの音量（min=0.0, max=1.0）
																{ // あるトラックの、ある再生位置[tick]におけるノートの音高と音量を取得
																	pitchOfNoteAtCurrentTick = Number.NEGATIVE_INFINITY; // あるtickにおいて鳴っているノートがなかったら Number.NEGATIVE_INFINITY を入れておく
																	volumeOfNoteAtCurrentTick = 0.0; // あるtickにおいて鳴っているノートがなかったら 0.0 を入れておく
																	{ // MEvent インスタンスを順次走査
																		// TODO: 二分探索を用いて処理を高速化する
																		len = _pianoRollItemArrArr_ref[j].length;
																		for (i = 0 ; i < len ; i++ ) { 
																			var item2:PianoRollItem = _pianoRollItemArrArr_ref[j][i];
																			
																			if (item2.startPosInTick < positionXInTick && positionXInTick <= item2.endPosInTick) {
																				// あるトラックの、ある再生位置[tick]におけるノートが確定したら、そのノートの音高を代入
																				pitchOfNoteAtCurrentTick = item2.startPitch;
																				volumeOfNoteAtCurrentTick = Number(item2.velocity) / 127.0;
																			}else{
																				continue;
																			}
																		}
																	}
																}
																
																if(pitchOfNoteAtCurrentTick != Number.NEGATIVE_INFINITY){ // 再生位置バーとノートの交点が存在しない場合は何もしない
																	var desirableY:Number = PianoRoll.PIANOROLL_HEIGHT - PianoRoll.SEMITONE_HEIGHT * (pitchOfNoteAtCurrentTick / 100.0); // インジケータがあるべき位置
																	
																	if (_indicatorYArr[j] == undefined) { // まだインジケータが画面上に出現したことがない場合
																		//trace("_indicatorYArr[j] = desirableY: " + _indicatorYArr[j] + " = " + desirableY);
																		_indicatorYArr[j] = desirableY;// イージングせず即位置を変更
																	}else { // インジケータが既に画面上に出現したことがあり、インジケータのy座標が既に存在する場合は
																		if (_indicatorEasingQueueArr[j].length == 0) { // イージング処理が完了済みだったら、「現在のインジケータの位置」と「インジケータのあるべき位置」を比較して、インジケータイージングキュー[j]にエントリを enqueue
																			if (_indicatorYArr[j] != desirableY) {
																				var DURATION_IN_FRAME2:Number = 2.0; // 何フレームで動かすか
																				for (i = 1.0 ; i <= DURATION_IN_FRAME2 ; i += 1.0) {
																					_indicatorEasingQueueArr[j].push(Util.easeOut_Quadratic(i, _indicatorYArr[j], desirableY - _indicatorYArr[j], DURATION_IN_FRAME2));
																				}
																			}
																		}else {
																			if (_indicatorEasingQueueArr[j][0]  != desirableY) { // イージング処理が途中だったら、「イージング処理終了後のインジケータの位置」と「インジケータのあるべき位置」を比較して、インジケータイージングキュー[j]にエントリを enqueue
																				_indicatorEasingQueueArr[j].length = 0; // 元々行われていたイージングを中止
																				var DURATION_IN_FRAME3:Number = 2.0; // 何フレームで動かすか
																				for (i = 1.0 ; i <= DURATION_IN_FRAME3 ; i += 1.0) {
																					_indicatorEasingQueueArr[j].push(Util.easeOut_Quadratic(i, _indicatorYArr[j], desirableY - _indicatorYArr[j], DURATION_IN_FRAME3));
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
												{ // 再生位置バーとノートの交点のインジケータを描画
													pianorollSprite.intersectionIndicatorLayer_ref.graphics.clear();
													if (_sequencer_ref.isPlaying() || _sequencer_ref.isPaused()) { // 再生中かポーズ中のときのみインジケータを表示
														if(_pianoRollItemArrArr_ref != null){ // 各トラックのノートとの交点を計算して表示
															var colorSet:ColorSet = new ColorSet();
															
															len2 = _pianoRollItemArrArr_ref.length;
															//trace(_pianoRollItemArrArr_ref);
															for (j = 1 ; j < len2 ; j++ ) { // 0トラック目（テンポトラック）は無視
																colorSet.h = ((240-(-45))/*←青スタート。0トラック目がテンポトラックであることに注意して1ステップ分の色相変位を引いておく*/ + ((-45)/*←8ステップで色相を1周するように1ステップあたりの色相変位を設定。また、色相を「青→水色→黄緑→黄→橙→赤→紫」という風に逆順に辿るため負の値を設定*/*j)) % 360; // 色相（hue）
																colorSet.s = 100; // 彩度（saturation）
																colorSet.v = 80; // 明度（value）
																
																pianorollSprite.intersectionIndicatorLayer_ref.graphics.beginFill(colorSet.c, 0.5);
																pianorollSprite.intersectionIndicatorLayer_ref.graphics.lineStyle(2.0, 0x000000, 0.5);
																{ // 再生位置バーとノートの交点にインジケータを描画
																	var volumeOfNoteAtSpecificTick:Number; // あるトラックの、ある再生位置[tick]におけるノートの音量（min=0.0, max=1.0）
																	{ // あるトラックの、ある再生位置[tick]におけるノートの音量を取得
																		volumeOfNoteAtSpecificTick = 0.0; // あるtickにおいて鳴っているノートがなかったら 0.0 を入れておく
																		{ // MEvent インスタンスを順次走査
																			// TODO: 二分探索を用いて処理を高速化する
																			len = _pianoRollItemArrArr_ref[j].length;
																			for (i = 0 ; i < len ; i++ ) { 
																				var item3:PianoRollItem = _pianoRollItemArrArr_ref[j][i];
																				
																				if (item3.startPosInTick < positionXInTick && positionXInTick <= item3.endPosInTick) {
																					// あるトラックの、ある再生位置[tick]におけるノートが確定したら、そのノートの音量を代入
																					volumeOfNoteAtSpecificTick = Number(item3.velocity) / 127.0;
																				}else{
																					continue;
																				}
																			}
																		}
																	}
																	
																	// インジケータを描画
																	if (_indicatorYArr[j] == undefined) { continue; } // インジケータがまだ画面上に現れたことがない場合はインジケータを描画しようとしない
																	if (volumeOfNoteAtSpecificTick <= 0.0) { continue; } // 音量が0以下の場合はインジケータを描画しようとしない
																	pianorollSprite.intersectionIndicatorLayer_ref.graphics.drawCircle(
																		Number(PianoRoll.BEAT_WIDTH) * (positionXInTick / 96.0),
																		_indicatorYArr[j],
																		// 数値的な音の大きさではなく心理的な音の大きさを図示したいので、対数を取っておく。
																		// TODO: MEvent.VOL_MODE （音量モードの線形/非線形を切り替えるイベント）に対応する
																		// volume が0.001未満の場合は0.001扱いとする。
																		4.0/*<-このパラメータで大きさを調整*/ * (Math.log(Math.max(0.001, volumeOfNoteAtSpecificTick)) + 3.0)
																		);
																}
																pianorollSprite.intersectionIndicatorLayer_ref.graphics.endFill();
															}
														}
													}
												}
											}
										}
									});
									pianorollSprite.addEventListener(Event.SCROLL, function(e:Event):void { // pianorollSprite.scrollRect が変化したときに呼ばれるハンドラ
										pianorollHScrollBar.scrollPosition = pianorollSprite.scrollRect.x;
										pianorollVScrollBar.scrollPosition = pianorollSprite.scrollRect.y;
										{ // 「小節番号表示ヘッダSpriteのx方向のクリッピング位置」を「ピアノロールSpriteのx方向のクリッピング位置」と同期
											_updateScrollRect(_measureheaderSprite_ref, _pianorollSprite_ref.scrollRect.x, null, null, null);
										}
										{ // 「鍵盤Spriteのy方向のクリッピング位置」を「ピアノロールSpriteのy方向のクリッピング位置」と同期
											_updateScrollRect(_kboardSprite_ref, null, _pianorollSprite_ref.scrollRect.y, null, null);
										}
									});
								}
								_pianorollSprite_ref = pianorollSprite; // 参照のプール
								
								pianorollUIComponent.addChild(pianorollSprite);
							}
							pianorollUIComponent.addEventListener(Event.RESIZE, function(e:Event):void { // ピアノロールのサイズが変わった場合に備えてイベントハンドラを設定
								{ // ピアノロールのビューポートのサイズを更新
									_updateScrollRect(_pianorollSprite_ref, null, null, pianorollUIComponent.width, pianorollUIComponent.height);
								}
								{ // 縦横スクロールバーの pageSize を更新（不要？）
									pianorollHScrollBar.pageSize = pianorollUIComponent.width;
									pianorollVScrollBar.pageSize = pianorollUIComponent.height;
								}
								{ // 縦横スクロールバーの maxScrollPosition を更新
									pianorollHScrollBar.maxScrollPosition = (PianoRoll.BEAT_WIDTH*4)*100 - pianorollUIComponent.width;
									pianorollVScrollBar.maxScrollPosition = PianoRoll.PIANOROLL_HEIGHT - pianorollUIComponent.height;
								}
							});
							pianorollUIComponent.addEventListener(KeyboardEvent.KEY_DOWN, function(e2:KeyboardEvent):void {
								_isKeyPressed[e2.keyCode] = true;
							});
							pianorollUIComponent.addEventListener(KeyboardEvent.KEY_UP, function(e2:KeyboardEvent):void {
								_isKeyPressed[e2.keyCode] = false;
							});
							pianorollUIComponent.addEventListener(MouseEvent.MOUSE_WHEEL, function(e3:MouseEvent):void {
								var delta:int = e3.delta; // ホイールの回転量

								_relativeScroll(0, PianoRoll.SEMITONE_HEIGHT * ( -delta )); // (半音の縦幅)*(ホイールの回転量)ずつスクロール（スクロールの向きは指を動かす方向と同じ）
								pianorollSprite.dispatchEvent(new Event(Event.SCROLL)); // Event.SCROLL イベントを dispatch
							});
							// TODO: キー押下状態中にフォーカスがどっか行ったときに備えて FocusEvent.OUT 時にキー押下状態を全部 false にするコードを追加
							// pianorollUIComponent.addEventListener(FocusEvent.FOCUS_OUT, function(e3:FocusEvent):void {
							// 	trace(e3);
							// });
						}
						{ // 縦横スクロールバーの scrollPosition, maxScrollPosition を初期化
							pianorollHScrollBar.scrollPosition = pianorollSprite.scrollRect.x;
							pianorollVScrollBar.scrollPosition = pianorollSprite.scrollRect.y;
							pianorollHScrollBar.maxScrollPosition = (PianoRoll.BEAT_WIDTH*4)*100 - pianorollUIComponent.width;
							pianorollVScrollBar.maxScrollPosition = PianoRoll.PIANOROLL_HEIGHT - pianorollUIComponent.height;
						}
					}
				}

	          public function setWarnings(e:Event):void {
	            warnings.text = player.getWarnings();
	          }

				public function play():void {
					var i:int; // for用
					var j:int; // for用
					var len:int; // for用
					var len2:int; // for用
					var e:MEvent; // for用
					var eventsOfTrack:Array; // for用
					var item:PianoRollItem;
					
					if (!player.isPlaying()) {
						if (player.isPaused()) {
							m_timer.start(); // 1秒ごとに再生位置表示を更新するタイマーを起動
						}else {
							if(rewindOnPlayCheckBox.selected){ // 「新規再生時に最初まで巻き戻し」が有効なときに新規再生が起きたらオートスクロールをキューする
								_absoluteScrollQueue.length　= 0; // オートスクロール中だったらそのオートスクロールを中断する
								{
									var DURATION_IN_FRAME:Number = 60.0; // 何フレームで動かすか
									for (i = 1.0 ; i <= DURATION_IN_FRAME ; i += 1.0) {
										var absoluteScrollEntry:Object; // スクロール先の絶対座標を保持するエントリ
										{
											absoluteScrollEntry = new Object(); // absoluteScrollEntry["scrollTo_x"] のみを要素に持つ連想配列
											absoluteScrollEntry["scrollTo_x"] = Util.easeInOut_Quadratic(i, _pianorollSprite_ref.scrollRect.x, -_pianorollSprite_ref.scrollRect.x, DURATION_IN_FRAME);
										}
										
										_absoluteScrollQueue.push(absoluteScrollEntry);
									}
								}
							}
						}
						
						player.play(input.text);
						playButton.label = "Pause";

						var tracks:Array;
						{ // tracks を初期化（その過程で MML インスタンスと MSequencer インスタンスを取得）
							var sequencer:MSequencer;
							{ // MSequencer インスタンスを取得
								var mml:MML;
								{ // MML インスタンスを取得
									mml = player.getMML();
								}
								
								sequencer = mml.getSequencer();
							}
							_sequencer_ref = sequencer;
							
							tracks = sequencer.getTrackArr();
						}
						/*{ // MEvent 列をダンプ
							len = tracks.length;
							for (i = 0 ; i < len ; i++ ) {
								trace("[track " + i + "]");
								trace(tracks[i].getEventsStr()); // デバッグ用
								trace("\n")
							}
						}*/
						{ // tempo boundary entry(= テンポ境界の情報)の列を MEvent.TEMPO イベントの列から生成
							var tempoBoundaryEntries:Array; // tempo boundary entry(= テンポ境界の情報)の列
							{
								var eventsOfTempoTrack:Array = tracks[0].getEvents();
								// trace("[track " + 0 + "]"); // テンポトラックのMEvent列をダンプ
								// trace(tracks[0].getEventsStr());
								// trace("\n");
								
								tempoBoundaryEntries = new Array();
								{ // テンポ境界における「再生位置[tick]」「後続のテンポ」を取得
									//trace(eventsOfTempoTrack.length);
									len = eventsOfTempoTrack.length;
									for (i = 0 ; i < len ; i++ ) { // MEvent インスタンスを順次走査
										e = eventsOfTempoTrack[i];
										if (e.getTick() > 38400) { break; } // 1-origin で101小節目以降のイベントは無視する
										switch(e.getStatus()) {
											case MStatus.TEMPO:
												//trace(i);
												var tempoBoundaryEntry:Object;
												{
													tempoBoundaryEntry = new Object();
													tempoBoundaryEntry["ms"] = 0.0; // 一応初期化しておく
													tempoBoundaryEntry["tick"] = e.getTick();
													tempoBoundaryEntry["tempo"] = e.getTempo();
												}
												
												//trace(tempoBoundaryEntry);
												tempoBoundaryEntries.push(tempoBoundaryEntry);
												break;
											default:
												break;
										}
									}
									if (tempoBoundaryEntries.length == 0) { // テンポトラックにTEMPOイベントが全くなくて tempo boundary entry 列が空列になった場合
										// デフォルトのテンポを持った tempo boundary entry を1個仕込む（これを入れないとテンポ境界情報が全くなくなるためバグる）
										var tempoBoundaryEntry2:Object;
										{
											tempoBoundaryEntry2 = new Object();
											tempoBoundaryEntry2["ms"] = 0.0;
											tempoBoundaryEntry2["tick"] = 0;
											tempoBoundaryEntry2["tempo"] = 120.0;
										}
										
										tempoBoundaryEntries.push(tempoBoundaryEntry2);
									}
								}
								{ // 各テンポ境界における「再生位置[tick]」「後続のテンポ」から、各テンポ境界における「再生位置[ms]」を計算
									len = tempoBoundaryEntries.length;
									for (i = 0 ; i < len ; i++ ) { // MEvent インスタンスを順次走査
										if (i == 0) {
											tempoBoundaryEntries[0]["ms"] = 0.0; // 特例
											//trace("ms: "+tempoBoundaryEntries[i]["ms"]);
											//trace("tick: "+tempoBoundaryEntries[i]["tick"]);
											//trace("tempo: "+tempoBoundaryEntries[i]["tempo"]);
											continue;
										}else {
											// 前のエントリの ms, tick, tempo と現在のエントリの tick を使って、現在のエントリの ms を計算
											tempoBoundaryEntries[i]["ms"]
												= tempoBoundaryEntries[i - 1]["ms"]
												   + (tempoBoundaryEntries[i]["tick"] - tempoBoundaryEntries[i - 1]["tick"]) /* [tick] */
												   / 96.0 /* [tick/beat] */
												   / tempoBoundaryEntries[i - 1]["tempo"] /* [beat/min] */
												   * 60000.0 /* [ms/min] */;
											//trace("ms: "+tempoBoundaryEntries[i]["ms"]);
											//trace("tick: "+tempoBoundaryEntries[i]["tick"]);
											//trace("tempo: "+tempoBoundaryEntries[i]["tempo"]);
										}
									}
								}
							}
							_tempoEntries_ref = tempoBoundaryEntries; // 参照のプール
							
							// tempoBoundaryEntries はここでは使わない。_tempoEntries_ref　に入れたらここでは用済み
						}
						{ // tracks[j] のノート(= PianoRollItem)の列を画面上に表示
							var colorSet:ColorSet = new ColorSet();
							
							_pianorollSprite_ref.itemLayer_ref.graphics.clear(); // まずレイヤ上の描画オブジェクトをクリア
							{
								var pianoRollItemArrArr:Array;
								{ // pianoRollItemArrArr を初期化
									pianoRollItemArrArr = new Array();
									{ // pianoRollItemArrArr に要素を追加していく
										len2 = tracks.length;
										for (j = 0 ; j < len2 ; j++ ) { // 0トラック目（テンポトラック）も見る
											eventsOfTrack = tracks[j].getEvents();
											
											{
												var pianoRollItemArr:Array;
												{ // pianoRollItemArr を初期化。tracks[j] の MEvent 列をノート(= PianoRollItem)の列に変換
													pianoRollItemArr = new Array();
													{ // pianoRollItemArr にノート(= PianoRollItem)を push していく
														len = eventsOfTrack.length;
														for (i = 0 ; i < len ; i++ ) { // MEvent インスタンスを順次走査
															e = eventsOfTrack[i];
															if (e.getTick() > 38400) { break; } // 1-origin で101小節目以降のイベントは無視する
															switch(e.getStatus()) { // TODO: test-driven で異常系を実装する
																case MStatus.NOTE_ON:
																	item = new PianoRollItem();
																	item.startPosInTick = e.getTick();
																	item.startPitch = e.getNoteNo()*100;
																	item.velocity = e.getVelocity();
																	break;
																case MStatus.NOTE_OFF:
																	// TODO: 38401 tick目以降にあるNOTE_OFFでも、対応するNOTE_ONが38400 tick目以前にある場合は特別に処理する
																	item.endPosInTick = e.getTick();
																	pianoRollItemArr.push(item);
																	break;
																case MStatus.NOTE: // TODO: タイに対応
																case MStatus.DETUNE: // TODO: DETUNE によるノートの音高変化に対応
																default:
																	break;
															}
														}
													}
												}
												//できたノート(= PianoRollItem)列をダンプ
												//trace(pianoRollItemArr);
												
												pianoRollItemArrArr.push(pianoRollItemArr);
											}
										}
									}
								}
								_pianoRollItemArrArr_ref = pianoRollItemArrArr; // 参照のプール
								
								for (j = 1 ; j < len2 ; j++ ) { // 0トラック目（テンポトラック）は無視
									colorSet.h = ((240-(-45))/*←青スタート。0トラック目がテンポトラックであることに注意して1ステップ分の色相変位を引いておく*/ + ((-45)/*←8ステップで色相を1周するように1ステップあたりの色相変位を設定。また、色相を「青→水色→黄緑→黄→橙→赤→紫」という風に逆順に辿るため負の値を設定*/*j)) % 360; // 色相（hue）
									colorSet.s = 100; // 彩度（saturation）
									colorSet.v = 85; // 明度（value）
									_pianorollSprite_ref.itemLayer_ref.graphics.lineStyle(2, colorSet.c);
									{
										len = pianoRollItemArrArr[j].length;
										for (i = 0 ; i < len ; i++ ) { // MEvent インスタンスを順次走査
											var item2:PianoRollItem = pianoRollItemArrArr[j][i];
											
											with(_pianorollSprite_ref.itemLayer_ref.graphics){ // ノートレイヤにノートを配置
												moveTo(
													Number(PianoRoll.BEAT_WIDTH) * (Number(item2.startPosInTick) / 96.0),
													Number(PianoRoll.SEMITONE_HEIGHT) * (128.0 - (Number(item2.startPitch) / 100.0))
												);
												lineTo(
													Number(PianoRoll.BEAT_WIDTH) * (Number(item2.endPosInTick) / 96.0),
													Number(PianoRoll.SEMITONE_HEIGHT) * (128.0 - (Number(item2.startPitch) / 100.0))
												);
											}
										}
									}
								}
							}
						}
						{ // 再生位置バーとノートの交点に表示するインジケータのy座標を全て undefined にする
							_indicatorYArr = new Array();
						}
						{ // インジケータイージングキューを初期化する
							_indicatorEasingQueueArr = new Array();
						}
					}else {
						player.pause();
						playButton.label = "Play";
						m_timer.stop();
					}
				}

	          public function stop():void {
	            player.stop();
	            playButton.label = "Play";
	            m_timer.reset();
	            progress.text = "";
				  voiceCount.text = "";
	          }

	          public function onComplete(e:Event):void {
	            playButton.label = "Play";
	            m_timer.reset();
	            progress.text = "";
				  voiceCount.text = "";
	          }

	          public function onBuffering(e:MMLEvent):void {
	            if (e.progress < 100) {
					  progress.text = "Buffering " + e.progress + "%";
					  voiceCount.text = "";
	            } else {
	              onSecond(e);
	              m_timer.start();
	            }
	          }

	          public function onSecond(e:Event):void {
	            progress.text = player.getNowTimeStr() + " / " + player.getTotalTimeStr();
				//voiceCount.text = "♪" + player.getVoiceCount();
	          }
	      ]]>
	</mx:Script>

	<mx:Panel title="FlMMLMonitor Rev.1 (based on FlMML@CodePlex Commit 19253)" width="100%" height="100%"
	          paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4">
	    <mx:VBox width="100%" height="100%"
	                   paddingTop="4" paddingBottom="4" paddingLeft="4" paddingRight="4">
	      <mx:VDividedBox width="100%" height="100%" backgroundColor="#dddddd">
	        <mx:TextArea id="input" width="100%" height="4%" fontSize="14" text="L8 O5CDEFGAB&lt;C"></mx:TextArea>
			<mx:Grid width="100%" height="94%" horizontalGap="0" verticalGap="0" backgroundColor="#ffdddd">
				<mx:GridRow width="100%">
					<mx:GridItem backgroundColor="#0080C0">
					</mx:GridItem>
					<mx:GridItem height="48">
						<!--小節番号表示ヘッダ--><mx:Image id="measureheaderUIComponent" width="100%" height="100%"></mx:Image>
					</mx:GridItem>
					<mx:GridItem backgroundColor="#0080C0">
					</mx:GridItem>
				</mx:GridRow>

				<mx:GridRow width="100%" height="100%">
					<mx:GridItem width="120">
						<!--鍵盤--><mx:Image id="kboardUIComponent" width="100%" height="100%"></mx:Image>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%">
						<!--ピアノロール--><flmon:FocusImage id="pianorollUIComponent" width="100%" height="100%"></flmon:FocusImage>
					</mx:GridItem>
					<mx:GridItem backgroundColor="#ffffff">
						<!--縦スクロールバー--><mx:VScrollBar id="pianorollVScrollBar" height="100%"
										minScrollPosition="0" maxScrollPosition="0" scrollPosition="0"
										pageSize="{pianorollUIComponent.height}"
										lineScrollSize="20" pageScrollSize="{pianorollUIComponent.height}" 
										repeatDelay="0" repeatInterval="0"
										scroll="
										_absoluteScrollQueue.length = 0;
										_absoluteScroll(_pianorollSprite_ref.scrollRect.x, pianorollVScrollBar.scrollPosition);
										_updateScrollRect(_kboardSprite_ref, null, pianorollVScrollBar.scrollPosition, null, null);
										" />
					</mx:GridItem>
				</mx:GridRow>

				<mx:GridRow width="100%">
					<mx:GridItem backgroundColor="#0080C0">
					</mx:GridItem>
					<mx:GridItem backgroundColor="#ffffff">
						<!--横スクロールバー--><mx:HScrollBar id="pianorollHScrollBar" width="100%"
										minScrollPosition="0" maxScrollPosition="0" scrollPosition="0"
										pageSize="{pianorollUIComponent.width}"
										lineScrollSize="20" pageScrollSize="{pianorollUIComponent.width}" 
										repeatDelay="0" repeatInterval="0"
										scroll="
										_absoluteScrollQueue.length = 0;
										_absoluteScroll(pianorollHScrollBar.scrollPosition, _pianorollSprite_ref.scrollRect.y);
										_updateScrollRect(_measureheaderSprite_ref, pianorollHScrollBar.scrollPosition, null, null, null);
										" />
					</mx:GridItem>
					<mx:GridItem backgroundColor="#0080C0">
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
	        <mx:TextArea id="warnings" width="100%" height="2%" fontSize="10" editable="false">
	          <mx:text></mx:text>
	        </mx:TextArea>
	      </mx:VDividedBox>
	      <mx:Box direction="horizontal">
	        <mx:Button id="playButton" label="Play" click="play();" />
	        <mx:Button id="stopButton" label="Stop" click="stop();" />
	        <mx:HSlider id="hSlider" minimum="0" maximum="127" value="100"
	                    dataTipPlacement="top" tickColor="black" snapInterval="1"
	                    allowTrackClick="true" liveDragging="true"
	                    change="player.setMasterVolume(hSlider.value);"/>
	        <mx:Label id="progress" width="120" text="" />
	        <mx:Label id="voiceCount" width="60" text="" />
			<mx:CheckBox id="rewindOnPlayCheckBox" label="新規再生時に最初まで巻き戻す" selected="true"></mx:CheckBox>
			<mx:CheckBox id="autoScrollCheckBox" label="ページ単位でオートスクロール" selected="true"></mx:CheckBox>
	      </mx:Box>
	      <flmml:FlMML id="player" />
	    </mx:VBox>
	</mx:Panel>

</mx:Application>
